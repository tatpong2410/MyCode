pragma solidity ^0.4.24;		//เวอร์ชั่น

// ----------------------------------------------------------------------------
// Sample token contract			//ไฟล์ตัวอย่าง
//
// Symbol        : {{PLS}}   			 //สัญลักษณ์ เหรียญ
// Name          : {{PLS Token}} 		 //ชื่อเหรียญ
// Total supply  : {{1xxxxxxxxxxxxxx}} 	//จำนวนเหรียญ
// Decimals      : {{4}}			//ทศนิยมเหรียญ
// Owner Account : {{0xCA9114a83C79cA473d1370CE35EEdBEC556D4B2D}} // แอดเค้ากระเป๋าเงินใน MateMask
//
// Enjoy.
//									//ใส่ชื่อเราเพื่อไม่ให้เพื่อนก็อป
// (c) by Juan Cruz Martinez 2020. MIT Licence.		//คนสร้างโค้ด
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Lib: Safe Math
// ----------------------------------------------------------------------------
contract SafeMath {	// 21-42 

    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }

    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }

    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}


/**
ERC Token Standard #20 Interface
https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
*/
contract ERC20Interface {
    function totalSupply() public constant returns (uint);    		//supply คือจำนวนเหรียญ
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining); //เจ้าของเหรียญ และถูกส่งไปไหน
    function transfer(address to, uint tokens) public returns (bool success); 	//
    function approve(address spender, uint tokens) public returns (bool success);	//การทำงาน
    function transferFrom(address from, address to, uint tokens) public returns (bool success); //ส่งจากแอดเดทไหน

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}


/**
Contract function to receive approval and execute function in one call
Borrowed from MiniMeToken
*/
contract ApproveAndCallFallBack {	
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}

/**
ERC20 Token, with the addition of symbol, name and decimals and assisted token transfers
*/
contract TSCToken is ERC20Interface, SafeMath {	//เริ่มสร้างเหรียญ(ERC20Interface ใช้ คอนเทค ที่49)
    string public symbol;				//เหรียญที่เราจะสร้าง
    string public  name;				//เหรียญที่เราจะสร้าง
    uint8 public decimals;				//เหรียญที่เราจะสร้าง
    uint public _totalSupply;				//เหรียญที่เราจะสร้าง

    mapping(address => uint) balances;		
    mapping(address => mapping(address => uint)) allowed;


    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor() public {
        symbol = "TSC";         //สัญลักษณ์ เหรียญ
        name = "TSC Token";     //ชื่อเหรียญ
        decimals = 4;           //ทศนิยมเหรียญ
        _totalSupply = 10000000;    //จำนวนเหรียญ
        balances[0xCA9114a83C79cA473d1370CE35EEdBEC556D4B2D] = _totalSupply;
        emit Transfer(address(0), 0xCA9114a83C79cA473d1370CE35EEdBEC556D4B2D, _totalSupply);   
    }


    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }


    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);  //มีจำนวนเหรียญเท่าไหร่
        emit Transfer(msg.sender, to, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account
    // 
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the from account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }


    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }


    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
}
